<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Targets>
  <Target Name="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\bin\Release\BlogEngine.Core.dll">
   <Modules>
    <Module Name="blogengine.core.dll">
     <Namespaces>
      <Namespace Name="BlogEngine.Core">
       <Types>
        <Type Name="Utils" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CanWrite(System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Helpers" File="Utils.cs" Line="1345">Object 'fs' can be disposed more than once in method 'Utils.CanWrite(string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1345</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RecycleIIS()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="NonBreaking">
             <Issue Certainty="33" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Helpers" File="Utils.cs" Line="1415">'Utils.RecycleIIS()' calls into 'DirectoryEntry.Invoke(string, params object[])' which has a LinkDemand. By making this call, 'DirectoryEntry.Invoke(string, params object[])' is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: &#xD;&#xA;   -&gt;'Utils.RecycleIIS()'&#xD;&#xA;   -&gt;'Utils.RecycleIIS()'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RenderControl(System.Web.UI.Control)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Helpers" File="Utils.cs" Line="1046">Object 'sWriter' can be disposed more than once in method 'Utils.RenderControl(Control)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 1046</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BlogEngine.Core.API.MetaWeblog">
       <Types>
        <Type Name="MetaWeblogException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">Add an implementation of GetObjectData to type 'MetaWeblogException'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MetaWeblogHandler" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#NewMediaObject(System.String,System.String,System.String,BlogEngine.Core.API.MetaWeblog.MWAMediaObject,System.Web.HttpContext)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\API\MetaWeblog" File="MetaWeblogHandler.cs" Line="769">Object 'bw' can be disposed more than once in method 'MetaWeblogHandler.NewMediaObject(string, string, string, MWAMediaObject, HttpContext)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 769</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\API\MetaWeblog" File="MetaWeblogHandler.cs" Line="769">Object 'fs' can be disposed more than once in method 'MetaWeblogHandler.NewMediaObject(string, string, string, MWAMediaObject, HttpContext)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 769</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BlogEngine.Core.Compilation">
       <Types>
        <Type Name="ReflectExpressionBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Name="OverrideOnly" Certainty="33" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Compilation" File="ReflectExpressionBuilder.cs" Line="82">Override 'ReflectExpressionBuilder.EvaluateExpression(object, BoundPropertyEntry, object, ExpressionBuilderContext)' has the following LinkDemand that is not present on base method 'ExpressionBuilder.EvaluateExpression(object, BoundPropertyEntry, object, ExpressionBuilderContext)': [AspNetHostingPermission(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]. If possible, apply the same LinkDemand to the base method. Otherwise, replace it with a full Demand or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Name="OverrideOnly" Certainty="33" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Compilation" File="ReflectExpressionBuilder.cs" Line="104">Override 'ReflectExpressionBuilder.GetCodeExpression(BoundPropertyEntry, object, ExpressionBuilderContext)' has the following LinkDemand that is not present on base method 'ExpressionBuilder.GetCodeExpression(BoundPropertyEntry, object, ExpressionBuilderContext)': [AspNetHostingPermission(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]. If possible, apply the same LinkDemand to the base method. Otherwise, replace it with a full Demand or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Name="OverrideOnly" Certainty="33" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Compilation" File="ReflectExpressionBuilder.cs" Line="125">Override 'ReflectExpressionBuilder.ParseExpression(string, Type, ExpressionBuilderContext)' has the following LinkDemand that is not present on base method 'ExpressionBuilder.ParseExpression(string, Type, ExpressionBuilderContext)': [AspNetHostingPermission(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]. If possible, apply the same LinkDemand to the base method. Otherwise, replace it with a full Demand or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SupportsEvaluate" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_SupportsEvaluate()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
               <Issue Name="OverrideOnly" Certainty="33" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Compilation" File="ReflectExpressionBuilder.cs" Line="53">Override 'ReflectExpressionBuilder.SupportsEvaluate.get()' has the following LinkDemand that is not present on base method 'ExpressionBuilder.SupportsEvaluate.get()': [AspNetHostingPermission(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]. If possible, apply the same LinkDemand to the base method. Otherwise, replace it with a full Demand or remove it entirely.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BlogEngine.Core.Compilation.Design">
       <Types>
        <Type Name="CodeExpressionEditor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AptcaTypesShouldOnlyExtendAptcaBaseTypes" Category="Microsoft.Security" CheckId="CA2117" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
           <Issue Certainty="25" Level="CriticalError">Do one of the following: 1) Remove the AllowPartiallyTrustedCallersAttribute from 'CodeExpressionEditor'. 2) If the attribute is necessary, verify that 'CodeExpressionEditor' does not expose any protected members of inherited types. 3) Add AllowPartiallyTrustedCallersAttribute to the base type 'ExpressionEditor', if you can ensure that this will not have negative implications on security.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError">The method 'CodeExpressionEditor.CodeExpressionEditor()' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'ExpressionEditor.ExpressionEditor()', which is defined in an assembly ('System.Design.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Compilation\Design" File="CodeExpressionEditor.cs" Line="40">Add the following security attribute to 'CodeExpressionEditor.EvaluateExpression(string, object, Type, IServiceProvider)' in order to match a LinkDemand on base method 'ExpressionEditor.EvaluateExpression(string, object, Type, IServiceProvider)':  'SecurityCriticalAttribute'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="QueryStringExpressionEditor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AptcaTypesShouldOnlyExtendAptcaBaseTypes" Category="Microsoft.Security" CheckId="CA2117" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
           <Issue Certainty="25" Level="CriticalError">Do one of the following: 1) Remove the AllowPartiallyTrustedCallersAttribute from 'QueryStringExpressionEditor'. 2) If the attribute is necessary, verify that 'QueryStringExpressionEditor' does not expose any protected members of inherited types. 3) Add AllowPartiallyTrustedCallersAttribute to the base type 'ExpressionEditor', if you can ensure that this will not have negative implications on security.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError">The method 'QueryStringExpressionEditor.QueryStringExpressionEditor()' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'ExpressionEditor.ExpressionEditor()', which is defined in an assembly ('System.Design.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Compilation\Design" File="QueryStringExpressionEditor.cs" Line="40">Add the following security attribute to 'QueryStringExpressionEditor.EvaluateExpression(string, object, Type, IServiceProvider)' in order to match a LinkDemand on base method 'ExpressionEditor.EvaluateExpression(string, object, Type, IServiceProvider)':  'SecurityCriticalAttribute'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ServerVariableExpressionEditor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AptcaTypesShouldOnlyExtendAptcaBaseTypes" Category="Microsoft.Security" CheckId="CA2117" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
           <Issue Certainty="25" Level="CriticalError">Do one of the following: 1) Remove the AllowPartiallyTrustedCallersAttribute from 'ServerVariableExpressionEditor'. 2) If the attribute is necessary, verify that 'ServerVariableExpressionEditor' does not expose any protected members of inherited types. 3) Add AllowPartiallyTrustedCallersAttribute to the base type 'ExpressionEditor', if you can ensure that this will not have negative implications on security.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError">The method 'ServerVariableExpressionEditor.ServerVariableExpressionEditor()' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'ExpressionEditor.ExpressionEditor()', which is defined in an assembly ('System.Design.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Compilation\Design" File="ServerVariableExpressionEditor.cs" Line="43">Add the following security attribute to 'ServerVariableExpressionEditor.EvaluateExpression(string, object, Type, IServiceProvider)' in order to match a LinkDemand on base method 'ExpressionEditor.EvaluateExpression(string, object, Type, IServiceProvider)':  'SecurityCriticalAttribute'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetExpressionEditorSheet(System.String,System.IServiceProvider)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Compilation\Design" File="ServerVariableExpressionEditor.cs" Line="61">Add the following security attribute to 'ServerVariableExpressionEditor.GetExpressionEditorSheet(string, IServiceProvider)' in order to match a LinkDemand on base method 'ExpressionEditor.GetExpressionEditorSheet(string, IServiceProvider)':  'SecurityCriticalAttribute'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ServerVariableExpressionEditor+ServerVariableExpressionEditorSheet" Kind="Class" Accessibility="Private" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor(System.String,BlogEngine.Core.Compilation.Design.ServerVariableExpressionEditor,System.IServiceProvider)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Compilation\Design" File="ServerVariableExpressionEditor.cs" Line="96">The method 'ServerVariableExpressionEditor.ServerVariableExpressionEditorSheet.ServerVariableExpressionEditorSheet(string, ServerVariableExpressionEditor, IServiceProvider)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'ExpressionEditorSheet.ExpressionEditorSheet(IServiceProvider)', which is defined in an assembly ('System.Design.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="SessionExpressionEditor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AptcaTypesShouldOnlyExtendAptcaBaseTypes" Category="Microsoft.Security" CheckId="CA2117" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
           <Issue Certainty="25" Level="CriticalError">Do one of the following: 1) Remove the AllowPartiallyTrustedCallersAttribute from 'SessionExpressionEditor'. 2) If the attribute is necessary, verify that 'SessionExpressionEditor' does not expose any protected members of inherited types. 3) Add AllowPartiallyTrustedCallersAttribute to the base type 'ExpressionEditor', if you can ensure that this will not have negative implications on security.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError">The method 'SessionExpressionEditor.SessionExpressionEditor()' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'ExpressionEditor.ExpressionEditor()', which is defined in an assembly ('System.Design.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#EvaluateExpression(System.String,System.Object,System.Type,System.IServiceProvider)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Name="BaseOnly" Certainty="33" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Compilation\Design" File="SessionExpressionEditor.cs" Line="40">Add the following security attribute to 'SessionExpressionEditor.EvaluateExpression(string, object, Type, IServiceProvider)' in order to match a LinkDemand on base method 'ExpressionEditor.EvaluateExpression(string, object, Type, IServiceProvider)':  'SecurityCriticalAttribute'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BlogEngine.Core.Data">
       <Types>
        <Type Name="BlogRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Find(System.Int32,System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="BlogRepository.cs" Line="38">The method 'BlogRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.OrderBy&lt;Blog&gt;(this IQueryable&lt;Blog&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="BlogRepository.cs" Line="36">The method 'BlogRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.Where&lt;Blog&gt;(this IQueryable&lt;Blog&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CategoryRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Find(System.Int32,System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="CategoryRepository.cs" Line="62">The method 'CategoryRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.OrderBy&lt;CategoryItem&gt;(this IQueryable&lt;CategoryItem&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="CategoryRepository.cs" Line="54">The method 'CategoryRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.Where&lt;CategoryItem&gt;(this IQueryable&lt;CategoryItem&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CommentFilterRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Find(System.Int32,System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="CommentFilterRepository.cs" Line="63">The method 'CommentFilterRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.OrderBy&lt;CommentFilterItem&gt;(this IQueryable&lt;CommentFilterItem&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="CommentFilterRepository.cs" Line="61">The method 'CommentFilterRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.Where&lt;CommentFilterItem&gt;(this IQueryable&lt;CommentFilterItem&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="CustomFieldRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Find(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="CustomFieldRepository.cs" Line="32">The method 'CustomFieldRepository.Find(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.Where&lt;CustomField&gt;(this IQueryable&lt;CustomField&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PackageRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Find(System.Int32,System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="PackageRepository.cs" Line="71">The method 'PackageRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.OrderBy&lt;Package&gt;(this IQueryable&lt;Package&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PageRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Find(System.Int32,System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="PageRepository.cs" Line="39">The method 'PageRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.OrderBy&lt;Page&gt;(this IQueryable&lt;Page&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="PageRepository.cs" Line="34">The method 'PageRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.Where&lt;Page&gt;(this IQueryable&lt;Page&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PostRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Find(System.Int32,System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="PostRepository.cs" Line="43">The method 'PostRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.OrderBy&lt;Post&gt;(this IQueryable&lt;Post&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="PostRepository.cs" Line="41">The method 'PostRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.Where&lt;Post&gt;(this IQueryable&lt;Post&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="RolesRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(BlogEngine.Core.Data.Models.RoleItem)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Provide correct arguments to formatting methods" Category="Microsoft.Usage" CheckId="CA2241" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="MissingFormatItem" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="RolesRepository.cs" Line="87">Method 'RolesRepository.Add(RoleItem)' calls 'string.Format(string, object)' and does not provide a format item for argument "1". The provided format string is: '"Error adding role"'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TagRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Find(System.Int32,System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="TagRepository.cs" Line="60">The method 'TagRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.OrderBy&lt;TagItem&gt;(this IQueryable&lt;TagItem&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="TrashRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetTrash(BlogEngine.Core.Data.Models.TrashType,System.Int32,System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="TrashRepository.cs" Line="123">The method 'TrashRepository.GetTrash(TrashType, int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.OrderBy&lt;TrashItem&gt;(this IQueryable&lt;TrashItem&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="TrashRepository.cs" Line="35">The method 'TrashRepository.GetTrash(TrashType, int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.Where&lt;TrashItem&gt;(this IQueryable&lt;TrashItem&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UsersRepository" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Find(System.Int32,System.Int32,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="UsersRepository.cs" Line="51">The method 'UsersRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.OrderBy&lt;BlogUser&gt;(this IQueryable&lt;BlogUser&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="UsersRepository.cs" Line="46">The method 'UsersRepository.Find(int, int, string, string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.Where&lt;BlogUser&gt;(this IQueryable&lt;BlogUser&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FindById(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data" File="UsersRepository.cs" Line="80">The method 'UsersRepository.FindById(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.Where&lt;BlogUser&gt;(this IQueryable&lt;BlogUser&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BlogEngine.Core.Data.ViewModels">
       <Types>
        <Type Name="DashboardVM" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Comments" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_Comments()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
               <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data\ViewModels" File="DashboardVM.cs" Line="56">The method 'DashboardVM.Comments.get()' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DynamicQueryable.OrderBy&lt;Comment&gt;(this IQueryable&lt;Comment&gt;, string, params object[])', which is defined in an assembly ('Dynamic.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#GetLogs()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Data\ViewModels" File="DashboardVM.cs" Line="242">Object 'sw' can be disposed more than once in method 'DashboardVM.GetLogs()'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 242</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BlogEngine.Core.FileSystem">
       <Types>
        <Type Name="FileSystemUtilities" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CompressDirectory(System.String,BlogEngine.Core.FileSystem.Directory)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\FileSystem" File="FileSystemUtilities.cs" Line="36">Object 'File.Create(ArchiveOutputLocation)' can be disposed more than once in method 'FileSystemUtilities.CompressDirectory(string, Directory)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 36</Issue>
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\FileSystem" File="FileSystemUtilities.cs" Line="36">Object 'zStream' can be disposed more than once in method 'FileSystemUtilities.CompressDirectory(string, Directory)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 36</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BlogEngine.Core.Packaging">
       <Types>
        <Type Name="FileSystem" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateManifestIfNotExists(NuGet.IPackage,System.Collections.Generic.List`1&lt;BlogEngine.Core.Packaging.PackageFile&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="541">The method 'FileSystem.CreateManifestIfNotExists(IPackage, List&lt;PackageFile&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.Authors.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="539">The method 'FileSystem.CreateManifestIfNotExists(IPackage, List&lt;PackageFile&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.Description.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="545">The method 'FileSystem.CreateManifestIfNotExists(IPackage, List&lt;PackageFile&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.IconUrl.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="545">The method 'FileSystem.CreateManifestIfNotExists(IPackage, List&lt;PackageFile&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.IconUrl.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="543">The method 'FileSystem.CreateManifestIfNotExists(IPackage, List&lt;PackageFile&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.ProjectUrl.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="543">The method 'FileSystem.CreateManifestIfNotExists(IPackage, List&lt;PackageFile&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.ProjectUrl.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="518">The method 'FileSystem.CreateManifestIfNotExists(IPackage, List&lt;PackageFile&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="521">The method 'FileSystem.CreateManifestIfNotExists(IPackage, List&lt;PackageFile&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="538">The method 'FileSystem.CreateManifestIfNotExists(IPackage, List&lt;PackageFile&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="550">The method 'FileSystem.CreateManifestIfNotExists(IPackage, List&lt;PackageFile&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="544">The method 'FileSystem.CreateManifestIfNotExists(IPackage, List&lt;PackageFile&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Version.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPackageManifest(System.String,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="496">Object 'textReader' can be disposed more than once in method 'FileSystem.GetPackageManifest(string, string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 496</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InstallPackage(NuGet.IPackage)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="108">The method 'FileSystem.InstallPackage(IPackage)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="111">The method 'FileSystem.InstallPackage(IPackage)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="125">The method 'FileSystem.InstallPackage(IPackage)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="140">The method 'FileSystem.InstallPackage(IPackage)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="108">The method 'FileSystem.InstallPackage(IPackage)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Version.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="FileSystem.cs" Line="111">The method 'FileSystem.InstallPackage(IPackage)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Version.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Gallery" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetNugetPackages()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="150">The method 'Gallery.GetNugetPackages()' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageRepository.GetPackages()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="149">The method 'Gallery.GetNugetPackages()' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PackageRepositoryFactory.CreateRepository(string)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="149">The method 'Gallery.GetNugetPackages()' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PackageRepositoryFactory.Default.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Load(System.Collections.Generic.List`1&lt;BlogEngine.Core.Data.Models.Package&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="29">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackage.IsLatestVersion.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackage.Published.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackage.Published.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.Authors.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.Authors.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.Description.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.Description.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.Description.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.IconUrl.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.IconUrl.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.ProjectUrl.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.ProjectUrl.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.Tags.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.Title.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageMetadata.Title.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="53">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Version.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="53">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Version.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Gallery.cs" Line="31">The method 'Gallery.Load(List&lt;Package&gt;)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IServerPackageMetadata.DownloadCount.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Installer" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_repository" Kind="Property" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Accessors>
            <Accessor Name="#get__repository()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
             <Messages>
              <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
               <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="18">The method 'Installer._repository.get()' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PackageRepositoryFactory.CreateRepository(string)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
               <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="18">The method 'Installer._repository.get()' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PackageRepositoryFactory.Default.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#InstallPackage(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="39">The method 'Installer.InstallPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DefaultPackagePathResolver.DefaultPackagePathResolver(string)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="48">The method 'Installer.InstallPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Id.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="48">The method 'Installer.InstallPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'IPackageName.Version.get()', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="46">The method 'Installer.InstallPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PackageManager.InstallPackage(IPackage, bool, bool)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="39">The method 'Installer.InstallPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PackageManager.PackageManager(IPackageRepository, IPackagePathResolver, IFileSystem)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="44">The method 'Installer.InstallPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PackageRepositoryExtensions.FindPackage(this IPackageRepository, string)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="39">The method 'Installer.InstallPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PhysicalFileSystem.PhysicalFileSystem(string)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UninstallGalleryPackage(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="107">The method 'Installer.UninstallGalleryPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'DefaultPackagePathResolver.DefaultPackagePathResolver(string)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="107">The method 'Installer.UninstallGalleryPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PackageManager.PackageManager(IPackageRepository, IPackagePathResolver, IFileSystem)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="115">The method 'Installer.UninstallGalleryPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PackageManager.UninstallPackage(IPackage, bool)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="112">The method 'Installer.UninstallGalleryPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PackageRepositoryExtensions.FindPackage(this IPackageRepository, string)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
             <Issue Certainty="25" Level="CriticalError" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="107">The method 'Installer.UninstallGalleryPackage(string)' is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls 'PhysicalFileSystem.PhysicalFileSystem(string)', which is defined in an assembly ('NuGet.Core.dll') that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UninstallPackage(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Provide correct arguments to formatting methods" Category="Microsoft.Usage" CheckId="CA2241" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="MissingArgument" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Services\Packaging" File="Installer.cs" Line="97">Method 'Installer.UninstallPackage(string)' calls 'string.Format(string, params object[])' and does not provide an argument for format item "{0}, {1}". The provided format string is: '"Error unistalling package {0}: {1}"'</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="BlogEngine.Core.Providers">
       <Types>
        <Type Name="DbBlogProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FillProfiles()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Provide correct arguments to formatting methods" Category="Microsoft.Usage" CheckId="CA2241" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="MissingFormatItem" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="2398">Method 'DbBlogProvider.FillProfiles()' calls 'string.Format(string, object, object)' and does not provide a format item for argument "2". The provided format string is: '"SELECT UserName FROM {0}Profiles GROUP BY UserName"'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#FillRights()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="2300">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.FillRights()' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SavePingServices(System.Collections.Specialized.StringCollection)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="2051">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.SavePingServices(StringCollection)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveRights(System.Collections.Generic.IEnumerable`1&lt;BlogEngine.Core.Right&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="2347">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.SaveRights(IEnumerable&lt;Right&gt;)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="2352">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.SaveRights(IEnumerable&lt;Right&gt;)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="2362">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.SaveRights(IEnumerable&lt;Right&gt;)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveSettings(System.Collections.Specialized.StringDictionary)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="2256">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.SaveSettings(StringDictionary)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveToDataStore(BlogEngine.Core.DataStore.ExtensionType,System.String,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="2152">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.SaveToDataStore(ExtensionType, string, object)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SelectPost(System.Guid)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="1038">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.SelectPost(Guid)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="1120">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.SelectPost(Guid)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SetupNewBlog(BlogEngine.Core.Blog,System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="761">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.SetupNewBlog(Blog, string, string, string)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateCategories(BlogEngine.Core.Post,BlogEngine.Core.Providers.DbConnectionHelper)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="3106">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.UpdateCategories(Post, DbConnectionHelper)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateComments(BlogEngine.Core.Post,BlogEngine.Core.Providers.DbConnectionHelper)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="3169">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.UpdateComments(Post, DbConnectionHelper)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateNotify(BlogEngine.Core.Post,BlogEngine.Core.Providers.DbConnectionHelper)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="3217">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.UpdateNotify(Post, DbConnectionHelper)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateProfile(BlogEngine.Core.AuthorProfile)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="2678">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.UpdateProfile(AuthorProfile)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateTags(BlogEngine.Core.Post,BlogEngine.Core.Providers.DbConnectionHelper)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="3249">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.UpdateTags(Post, DbConnectionHelper)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#UpdateVerses(BlogEngine.Core.Post,BlogEngine.Core.Providers.DbConnectionHelper)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbBlogProvider.cs" Line="3132">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbBlogProvider.UpdateVerses(Post, DbConnectionHelper)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DbConnectionHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateTextCommand(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbConnectionHelper.cs" Line="128">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbConnectionHelper.CreateTextCommand(string)' could contain the following variables 'commandText'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DbMembershipProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#ChangePassword(System.String,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbMembershipProvider.cs" Line="234">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbMembershipProvider.ChangePassword(string, string, string)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetAllUsers(System.Int32,System.Int32,System.Int32&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Provide correct arguments to formatting methods" Category="Microsoft.Usage" CheckId="CA2241" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="MissingFormatItem" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbMembershipProvider.cs" Line="400">Method 'DbMembershipProvider.GetAllUsers(int, int, out int)' calls 'string.Format(string, object, object)' and does not provide a format item for argument "2". The provided format string is: '"SELECT username, EmailAddress, lastLoginTime FROM {0}Users "'</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PasswordAttemptWindow" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_PasswordAttemptWindow()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbMembershipProvider.cs" Line="126">'DbMembershipProvider.PasswordAttemptWindow.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#PasswordStrengthRegularExpression" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Accessors>
            <Accessor Name="#get_PasswordStrengthRegularExpression()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
             <Messages>
              <Message TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="Breaking">
               <Issue Name="PropertyGetter" Certainty="90" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbMembershipProvider.cs" Line="148">'DbMembershipProvider.PasswordStrengthRegularExpression.get()' creates an exception of type 'NotImplementedException', an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Issue>
              </Message>
             </Messages>
            </Accessor>
           </Accessors>
          </Member>
          <Member Name="#ResetPassword(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbMembershipProvider.cs" Line="685">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbMembershipProvider.ResetPassword(string, string)' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DbRoleProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddUsersToRoles(System.String[],System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbRoleProvider.cs" Line="104">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbRoleProvider.AddUsersToRoles(string[], string[])' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RemoveUsersFromRoles(System.String[],System.String[])" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Name="WithNonLiterals" Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\DbProvider" File="DbRoleProvider.cs" Line="515">The query string passed to 'DbCommand.CommandText.set(string)' in 'DbRoleProvider.RemoveUsersFromRoles(string[], string[])' could contain the following variables 'this.tablePrefix', 'this.parmPrefix'. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UNCFileSystemProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FileToByteArray(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\FileSystemProviders" File="UNCFileSystemProvider.cs" Line="342">Object 'FileStream' can be disposed more than once in method 'UNCFileSystemProvider.FileToByteArray(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 342, 343</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlBlogProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#InsertPost(BlogEngine.Core.Post)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\XmlProvider" File="Posts.cs" Line="203">Object 'ms' can be disposed more than once in method 'XmlBlogProvider.InsertPost(Post)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 203</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="XmlFileSystemProvider" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#FileToByteArray(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202" Status="Active" Created="2016-09-26 08:36:20Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Users\Slavik\Source\Repos\Blog_2.02\BlogEngine\BlogEngine.Core\Providers\FileSystemProviders" File="XmlFileSystemProvider.cs" Line="315">Object 'FileStream' can be disposed more than once in method 'XmlFileSystemProvider.FileToByteArray(string)'. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 315, 316</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AptcaMethodsShouldOnlyCallAptcaMethods" Category="Microsoft.Security" CheckId="CA2116">
   <Name>APTCA methods should only call APTCA methods</Name>
   <Description>Methods with the AllowPartiallyTrustedCallersAttribute that call methods without that attribute might unintentionally expose functionality to partially trusted code. When a method has the AllowPartiallyTrustedCallersAttribute set, it is callable by partially trusted code. If it in turn calls methods without the attribute, a partially trusted caller is, in effect, being allowed to execute code that requires full trust. Depending on what full trust code is called and what parameter values are passed through from the partially trusted caller, malicious code might be able to exploit this security weakness.</Description>
   <Resolution Name="Default">The method {0} is defined in an assembly that has AllowPartiallyTrustedCallersAttribute and calls {1}, which is defined in an assembly ({2}) that does not. Review the called methods to ensure they cannot be used in a destructive manner if called by malicious code.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182297.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AptcaTypesShouldOnlyExtendAptcaBaseTypes" Category="Microsoft.Security" CheckId="CA2117">
   <Name>APTCA types should only extend APTCA base types</Name>
   <Description>Types with the AllowPartiallyTrustedCallersAttribute that extend types without that attribute might unintentionally expose functionality in the base type to partially trusted callers. When a type has the AllowPartiallyTrustedCallersAttribute set, it is callable by partially trusted code. If the base type does not have this attribute, it requires callers to be fully trusted. If the derived type exposes protected members in the base type, the base type's data is made accessible to partially trusted callers, creating an exploitable security weakness.</Description>
   <Resolution Name="Default">Do one of the following: 1) Remove the AllowPartiallyTrustedCallersAttribute from {0}. 2) If the attribute is necessary, verify that {0} does not expose any protected members of inherited types. 3) Add AllowPartiallyTrustedCallersAttribute to the base type {1}, if you can ensure that this will not have negative implications on security.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182298.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="25">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Do not dispose objects multiple times" Category="Microsoft.Usage" CheckId="CA2202">
   <Name>Do not dispose objects multiple times</Name>
   <Description>A correctly implemented Dispose method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.</Description>
   <Resolution Name="Default">Object {0} can be disposed more than once in method {1}. To avoid generating a System.ObjectDisposedException you should not call Dispose more than one time on an object.: Lines: 242</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182334.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotIndirectlyExposeMethodsWithLinkDemands" Category="Microsoft.Security" CheckId="CA2122">
   <Name>Do not indirectly expose methods with link demands</Name>
   <Description>Do not wrap a method protected by a LinkDemand with a method that does not perform a security check. A LinkDemand checks the permissions of the immediate caller rather than checking the permissions of all callers in the call stack. In this case, the permissions of the wrapper method will be checked. If the wrapper method does not, itself, check the permissions of callers higher in the call stack, malicious code might be able to execute the wrapped function even though it lacks permission to do so.</Description>
   <Resolution Name="Default">{0} calls into {1} which has a LinkDemand. By making this call, {1} is indirectly exposed to user code. Review the following call stack that might expose a way to circumvent security protection: {2}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182303.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securityrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotRaiseExceptionsInUnexpectedLocations" Category="Microsoft.Design" CheckId="CA1065">
   <Name>Do not raise exceptions in unexpected locations</Name>
   <Description>Do not explicitly raise exceptions from unexpected locations. There are some methods, such as Equals and GetHashCode, which users do not expect to raise exceptions. Therefore calls to these methods are not commonly wrapped in try catch blocks.</Description>
   <Resolution Name="PropertyGetter">{0} creates an exception of type {1}, an exception type that should not be raised in a property. If this exception instance might be raised, use a different exception type, convert this property into a method, or change this property's logic so that it no longer raises an exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb386039.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementISerializableCorrectly" Category="Microsoft.Usage" CheckId="CA2240">
   <Name>Implement ISerializable correctly</Name>
   <Description>If a type is assignable to ISerializable, it should implement GetObjectData. For unsealed types, the GetObjectData method should be callable and overridable by derived types.</Description>
   <Resolution Name="Default">Add an implementation of GetObjectData to type {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182342.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="60">Error</MessageLevel>
   <File Name="usagerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideLinkDemandsShouldBeIdenticalToBase" Category="Microsoft.Security" CheckId="CA2123">
   <Name>Override link demands should be identical to base</Name>
   <Description>If a virtual method has a LinkDemand, in many cases, so should any override of it, and if an override has a LinkDemand, so should the overridden virtual method. Because it is possible to call any of the overrides of a virtual method explicitly, they should all have the same LinkDemand status or, if not, should be reviewed. This also applies to LinkDemand security checks for methods that part of an interface implementation, because the caller might use an interface-typed reference to access the method.</Description>
   <Resolution Name="BaseOnly">Add the following security attribute to {0} in order to match a LinkDemand on base method {1}:  {2}.</Resolution>
   <Resolution Name="OverrideOnly">Override {0} has the following LinkDemand that is not present on base method {1}: {2}. If possible, apply the same LinkDemand to the base method. Otherwise, replace it with a full Demand or remove it entirely.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182305(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="33">CriticalError</MessageLevel>
   <File Name="securitytransparencyrules.dll" Version="4.0.0.0" />
  </Rule>
  <Rule TypeName="Provide correct arguments to formatting methods" Category="Microsoft.Usage" CheckId="CA2241">
   <Name>Provide correct arguments to formatting methods</Name>
   <Description>Provide the correct number of arguments to String.Format calls.</Description>
   <Resolution Name="MissingArgument">Method {0} calls {1} and does not provide an argument for format item {2}. The provided format string is: '{3}'</Resolution>
   <Resolution Name="MissingFormatItem">Method {0} calls {1} and does not provide a format item for argument {2}. The provided format string is: '{3}'</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182361.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Review SQL queries for security vulnerabilities" Category="Microsoft.Security" CheckId="CA2100">
   <Name>Review SQL queries for security vulnerabilities</Name>
   <Description>A SQL command string built from user input is vulnerable to SQL injection attacks. Microsoft SQL Server and other database servers support stored procedures and parameterized SQL queries, which reduce the risk of injection attacks.</Description>
   <Resolution Name="WithNonLiterals">The query string passed to {0} in {1} could contain the following variables {2}. If any of these variables could come from user input, consider using a stored procedure or a parameterized SQL query instead of building the query with string concatenations.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182310.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
